module UMLCopierContract;
create OUT : UMLs from IN : UML;



-- # NOT FIXED


-- # Boogie printing
--@pre
helper context UML!Port def: pre_encapsulated_owner(): Boolean = --encapsulated_owner
  UML!Port.allInstances()->forAll(p |  
UML!Element.allInstances()->includes(p.owner) implies 
    p.owner = p.ownedPort
); 


--@pre
helper context UML!QualifierValue def: pre_qualifier_attribute(): Boolean = --qualifier_attribute
  UML!QualifierValue.allInstances()->forAll(qv |  
UML!Property.allInstances()->includes(qv.qualifier) implies 
    qv.qualifier.end.qualifier->includes(qv.qualifier)
); 

--@pre
helper context UML!TemplateBinding def: pre_one_parameter_substitution(): Boolean = --one_parameter_substitution
  UML!TemplateBinding.allInstances()->forAll(tb |  
tb.signature.parameter->size()>0 implies 
UML!TemplateSignature.allInstances()->includes(tb.signature) implies 
tb.parameterSubstitution->size()>0 implies 
    tb.signature.parameter->forAll(tpp|
      tb.parameterSubstitution->select(tpsb|
      UML!TemplateParameter.allInstances()->includes(tpsb.formal) implies 
        tpsb.formal = tpp)->size() <= 1)
); 




--@pre
helper context UML!DecisionNode def: pre_incoming_outgoing_edges(): Boolean = --incoming_outgoing_edges
  UML!DecisionNode.allInstances()->forAll(dn |  
dn.outgoing->size()>0 implies 
dn.incoming->size()>0 implies 
    dn.incoming->size() = 1 or dn.incoming->size() = 2 and dn.outgoing->size() > 0
); 

--@pre
helper context UML!Parameter def: pre_connector_end(): Boolean = --connector_end
  UML!Parameter.allInstances()->forAll(p |  
p.end->size()>0 implies 
    p.end->notEmpty() implies p.collaborationRole->notEmpty()
); 





--@post
helper context UMLs!AcceptCallAction def: post_unmarshall(): Boolean = --AcceptCallAction_unmarshall
  UMLs!AcceptCallAction.allInstances()->forAll(aca |  
    aca.isUnmarshall = true
); 
