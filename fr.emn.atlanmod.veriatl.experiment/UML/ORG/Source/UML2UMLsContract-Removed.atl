module UML2UMLsContract;
create OUT : UMLs from IN : UML;
--@post
	helper context UMLs!ExceptionHandler def: post_handler_body_edges(): Boolean = --ExceptionHandler_handler_body_edges
	  UMLs!ExceptionHandler.allInstances()->forAll(eh |  
eh.handlerBody.outgoing->size()>0 implies (
eh.exceptionInput.incoming->size()>0 implies (
UMLs!ExecutableNode.allInstances()->includes(eh.handlerBody) implies (
UMLs!ObjectNode.allInstances()->includes(eh.exceptionInput) implies (
eh.handlerBody.incoming->size()>0 implies (
	    eh.handlerBody.incoming->isEmpty() and eh.handlerBody.outgoing->isEmpty() and eh.exceptionInput.incoming->isEmpty()
	    )))))
	); 
	
	--@post
	helper context UMLs!ObjectFlow def: post_no_executable_nodes(): Boolean = --ObjectFlow_no_executable_nodes
	  UMLs!ObjectFlow.allInstances()->forAll(of |  
UMLs!ActivityNode.allInstances()->includes(of.source) implies (
UMLs!ActivityNode.allInstances()->includes(of.target) implies (
	    not(of.source.oclIsKindOf(UMLs!ExecutableNode) or of.target.oclIsKindOf(UMLs!ExecutableNode))
	    ))
	); 

	--@post
	helper context UMLs!ConsiderIgnoreFragment def: post_type(): Boolean = --ConsiderIgnoreFragment_type
	  UMLs!ConsiderIgnoreFragment.allInstances()->forAll(cif |  
cif.message->size()>0 implies (
	    cif.message->forAll(nem|
	      nem.oclIsKindOf(UMLs!Operation) or nem.oclIsKindOf(UMLs!Signal))
	    )
	); 
	
	--@post
	helper context UMLs!DurationConstraint def: post_has_one_or_two_constrainedElements(): Boolean = --DurationConstraint_has_one_or_two_constrainedElements
	  UMLs!DurationConstraint.allInstances()->forAll(dc |  
dc.constrainedElement->size()>0 implies (
	    dc.constrainedElement->size() = 1 or dc.constrainedElement->size() = 2
	    )
	); 
	
	
	--@post
	helper context UMLs!TimeConstraint def: post_has_one_constrainedElement(): Boolean = --TimeConstraint_has_one_constrainedElement
	  UMLs!TimeConstraint.allInstances()->forAll(tc |  
tc.constrainedElement->size()>0 implies (
	    tc.constrainedElement->size() = 1
	    )
	); 
	
	--@post
	helper context UMLs!Constraint def: post_not_apply_to_self(): Boolean = --Constraint_not_apply_to_self
	  UMLs!Constraint.allInstances()->forAll(c |  
c.constrainedElement->size()>0 implies (
	    not(c.constrainedElement->includes(c))
	    )
	); 