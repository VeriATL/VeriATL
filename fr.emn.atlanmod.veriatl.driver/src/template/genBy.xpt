«IMPORT ATL»
«IMPORT OCL»
«EXTENSION extension::JavaExtension»


«DEFINE main FOR Module-»
«FILE "genBy.bpl"-
»function genBy(ref, String, HeapType, HeapType): bool;
«FOREACH this.elements AS rule»
«EXPAND printFunction(this) FOR rule»«
ENDFOREACH»
«ENDFILE-»
«ENDDEFINE»



«DEFINE printFunction(Module m) FOR MatchedRule-»
axiom (forall __r: ref, $s: HeapType, $t: HeapType :: genBy(__r, _«this.name», $s, $t) <==> 
(forall «EXPAND Library::printInPattern FOREACH this.inPattern.elements SEPARATOR ','»: ref :: {«FOREACH this.inPattern.elements AS iPattern SEPARATOR ','»read($s,«iPattern.varName»,alloc)«ENDFOREACH»}
«FOREACH this.inPattern.elements AS iPattern ITERATOR it SEPARATOR ' && '
»Seq#Index(getTarsBySrcs_inverse(__r), «it.counter0») == «EXPAND Library::printInPattern FOR iPattern»«
ENDFOREACH» ==>
«EXPAND Library::printInPatternHeap("$s") FOREACH this.inPattern.elements SEPARATOR ' && '» && «
IF this.inPattern.filter == null» true «ELSE» «EXPAND OCL2Boogie::printOCLExpression("$s") FOR this.inPattern.filter» «ENDIF»
));
«ENDDEFINE»






«DEFINE printFunction(Module m) FOR ModuleElement»
«ENDDEFINE»

«DEFINE printRule(String oid) FOR ModuleElement»
«ENDDEFINE»



«EXPAND Library::printInPatternHeap("$s") FOREACH this.inPattern.elements SEPARATOR ' && '» && «
IF this.inPattern.filter == null» true «ELSE» «EXPAND OCL2Boogie::printOCLExpression("$s") FOR this.inPattern.filter» «ENDIF» &&
  «EXPAND Library::printOutPattern(this.inPattern.elements) FOR this.inPattern» == abc


