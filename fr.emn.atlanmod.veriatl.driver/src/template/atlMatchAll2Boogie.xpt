

«IMPORT ATL»
«IMPORT OCL»


«EXTENSION extension::JavaExtension»


«DEFINE main FOR Module-»
«FILE "ATL_match.bpl"-»

procedure init_tar_model();
modifies $tarHeap;
ensures  (forall $o: ref :: $o == null || !read($tarHeap, $o, alloc));

«EXPAND printMatcherForMatchRule FOREACH elements-»
«ENDFILE-»
«ENDDEFINE»



«DEFINE printMatcherForMatchRule FOR MatchedRule-»
«IF this.metaType == MatchedRule-»


procedure «name»_matchAll() returns ();
  requires (forall «EXPAND Library::printInPattern FOREACH this.inPattern.elements SEPARATOR ','»: ref :: «EXPAND Library::printInPatternAllocation FOREACH this.inPattern.elements SEPARATOR ' && '» ==>
«IF this.inPattern.filter == null» true «ELSE» «EXPAND OCL2Boogie::printOCLExpression("$srcHeap") FOR this.inPattern.filter» «ENDIF» ==>
«EXPAND Library::printOutPattern(this.inPattern.elements) FOR this.inPattern» ==null || !read($tarHeap, «EXPAND Library::printOutPattern(this.inPattern.elements) FOR this.inPattern», alloc)); 
  modifies $tarHeap,$linkHeap;
// Rule Outcome
  ensures (forall «EXPAND Library::printInPattern FOREACH this.inPattern.elements SEPARATOR ','»: ref ::
«EXPAND Library::printInPatternAllocation FOREACH this.inPattern.elements SEPARATOR ' && '» ==>
«IF this.inPattern.filter == null» true «ELSE» «EXPAND OCL2Boogie::printOCLExpression("$srcHeap") FOR this.inPattern.filter» «ENDIF» ==>
«EXPAND Library::printOutPattern(this.inPattern.elements) FOR this.inPattern» !=null 
&& read($tarHeap, «EXPAND Library::printOutPattern(this.inPattern.elements) FOR this.inPattern», alloc)
&& dtype(«EXPAND Library::printOutPattern(this.inPattern.elements) FOR this.inPattern») <: «EXPAND Library::printOutPatternType(this.outPattern.elements.first()) FOR this.outPattern.elements.first()»);
// Frame Condition
  ensures (forall<alpha> $o : ref, $f: Field alpha ::
	($o == null 
	|| read($tarHeap, $o, $f) == read(old($tarHeap), $o, $f) 
	|| ((«FOREACH this.outPattern.elements AS e SEPARATOR ' || '
		»dtype($o) <: «EXPAND Library::printOutPatternType(e) FOR e»«
		ENDFOREACH») && Seq#Length(getTarsBySrcs_inverse($o)) == «this.inPattern.elements.size» && «FOREACH this.inPattern.elements AS e ITERATOR it SEPARATOR ' && '»dtype(Seq#Index(getTarsBySrcs_inverse($o), «it.counter1-1»)) <: «EXPAND Library::printInPatternType(e) FOR e»«ENDFOREACH» && $f==alloc )));
  free ensures $HeapSucc(old($tarHeap), $tarHeap);
  free ensures $HeapSucc(old($linkHeap), $linkHeap);
  free ensures surj_tar_model($srcHeap, $tarHeap);

function printGuard_«name»(hp: HeapType, «EXPAND Library::printInPattern FOREACH this.inPattern.elements SEPARATOR ': ref,'»: ref): bool
{ «IF this.inPattern.filter == null» true «ELSE» «EXPAND OCL2Boogie::printOCLExpression("hp") FOR this.inPattern.filter» «ENDIF» }

«ENDIF»
«ENDDEFINE»



«DEFINE printMatcherForMatchRule FOR ModuleElement»
«ENDDEFINE»

