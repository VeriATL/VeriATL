module IndustrialToAutosar;
create OUT : Autosar from IN : Industrial;



--PRECONDITION Industrial
--@pre
helper context Industrial!Module def: pre_UNQMODULENAME(): Boolean = --UNQMODULENAME
  Industrial!Module.allInstances()->forAll(m1 |
  	Industrial!Module.allInstances()->forAll(m2 |
  	  m1<>m2 implies m1.name<>m2.name));

--@pre
helper context Industrial!PhysicalNode def: pre_UNQPhysicalNodeNAME(): Boolean = --UNQPhysicalNodeNAME
  Industrial!PhysicalNode.allInstances()->forAll(m1 |
  	Industrial!PhysicalNode.allInstances()->forAll(m2 |
  	  m1<>m2 implies m1.name<>m2.name));

--@pre
helper context Industrial!Partition def: pre_UNQPartitionNAME(): Boolean = --UNQPartitionNAME
  Industrial!Partition.allInstances()->forAll(m1 |
  	Industrial!Partition.allInstances()->forAll(m2 |
  	  m1<>m2 implies m1.name<>m2.name));

--@pre
helper context Industrial!Scheduler def: pre_UNQSchedulerNAME(): Boolean = --UNQSchedulerNAME
  Industrial!Scheduler.allInstances()->forAll(m1 |
  	Industrial!Scheduler.allInstances()->forAll(m2 |
  	  m1<>m2 implies m1.name<>m2.name));


--POSTCONDITION Autosar 
--@post
helper context Autosar!ComponentPrototype def: post_UNQCOMPNAME(): Boolean = --UNQCOMPNAME
  Autosar!ComponentPrototype.allInstances()->forAll(m1 |
  	Autosar!ComponentPrototype.allInstances()->forAll(m2 |
  	  m1<>m2 implies m1.shortName<>m2.shortName));

--@post
helper context Autosar!SystemMapping def: post_UNQSYSMNAME(): Boolean = --UNQSYSMNAME
  Autosar!SystemMapping.allInstances()->forAll(m1 |
  	Autosar!SystemMapping.allInstances()->forAll(m2 |
  	  m1<>m2 implies m1.shortName<>m2.shortName));

--@post
helper context Autosar!System def: post_UNQSYSNAME(): Boolean = --UNQSYSNAME
  Autosar!System.allInstances()->forAll(m1 |
  	Autosar!System.allInstances()->forAll(m2 |
  	  m1<>m2 implies m1.shortName<>m2.shortName));

--@post
helper context Autosar!SoftwareComposition def: post_UNQSWCMPSNAME(): Boolean = --UNQSWCMPSNAME
  Autosar!SoftwareComposition.allInstances()->forAll(m1 |
  	Autosar!SoftwareComposition.allInstances()->forAll(m2 |
  	  m1<>m2 implies m1.shortName<>m2.shortName));

--@post
helper context Autosar!CompositionType def: post_UNQCMPSTYNAME(): Boolean = --UNQCMPSTYNAME
  Autosar!CompositionType.allInstances()->forAll(m1 |
  	Autosar!CompositionType.allInstances()->forAll(m2 |
  	  m1<>m2 implies m1.shortName<>m2.shortName));

--@post
helper context Autosar!EcuInstance def: post_UNQECUINAME(): Boolean = --UNQECUINAME
  Autosar!EcuInstance.allInstances()->forAll(m1 |
  	Autosar!EcuInstance.allInstances()->forAll(m2 |
  	  m1<>m2 implies m1.shortName<>m2.shortName));

--@post
helper context Autosar!SwcToEcuMapping def: post_UNQS2ENAME(): Boolean = --UNQS2ENAME
  Autosar!SwcToEcuMapping.allInstances()->forAll(m1 |
  	Autosar!SwcToEcuMapping.allInstances()->forAll(m2 |
  	  m1<>m2 implies m1.shortName<>m2.shortName));

--@post
helper context Autosar!PPortPrototype def: post_UNQPPNAME(): Boolean = --UNQPPNAME
  Autosar!PPortPrototype.allInstances()->forAll(m1 |
  	Autosar!PPortPrototype.allInstances()->forAll(m2 |
  	  m1<>m2 implies m1.shortName<>m2.shortName));

--@post
helper context Autosar!RPortPrototype def: post_UNQRPNAME(): Boolean = --UNQRPNAME
  Autosar!RPortPrototype.allInstances()->forAll(m1 |
  	Autosar!RPortPrototype.allInstances()->forAll(m2 |
  	  m1<>m2 implies m1.shortName<>m2.shortName));

--@post
helper context Autosar!CompositionType def: post_CompositionTypeComponent(): Boolean = --CompositionTypeComponent
  Autosar!CompositionType.allInstances()->forAll(c |
  	c.component->size() >= 1);


