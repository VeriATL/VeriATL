module UMLCopierContract;
create OUT : UMLs from IN : UML;

--# complex hypothesis

	--@post
	helper context UMLs!ProtocolStateMachine def: post_protocol_transitions(): Boolean = --ProtocolStateMachine_protocol_transitions
	  UMLs!ProtocolStateMachine.allInstances()->forAll(psm |  
psm.region->size()>0 implies (
	    psm.region->forAll(rr|
	    rr.transition->size()>0 implies (
	      rr.transition->forAll(tt|
	        tt.oclIsTypeOf(UMLs!ProtocolTransition))))
	    )
	); 


	--@post
	helper context UMLs!TemplateBinding def: post_parameter_substitution_formal(): Boolean = --TemplateBinding_parameter_substitution_formal
	  UMLs!TemplateBinding.allInstances()->forAll(tb |  
tb.signature.parameter->size()>0 implies (
UMLs!TemplateSignature.allInstances()->includes(tb.signature) implies (
tb.parameterSubstitution->size()>0 implies (
	    tb.parameterSubstitution->forAll(tpsb|
	    UMLs!TemplateParameter.allInstances()->includes(tpsb.formal) implies (
	      tb.signature.parameter->includes(tpsb.formal)))
	    )))
	); 


--# too much sub-goals generated

	--@post
	helper context UMLs!ReadLinkObjectEndQualifierAction def: post_same_type(): Boolean = --ReadLinkObjectEndQualifierAction_same_type
	  UMLs!ReadLinkObjectEndQualifierAction.allInstances()->forAll(rloeqa |  
UMLs!Type.allInstances()->includes(rloeqa.qualifier.type) implies (
UMLs!Property.allInstances()->includes(rloeqa.qualifier) implies (
UMLs!OutputPin.allInstances()->includes(rloeqa.result) implies (
UMLs!Type.allInstances()->includes(rloeqa.result.type) implies (
	    rloeqa.result.type = rloeqa.qualifier.type
	    ))))
	); 
	
	
	--@post
	helper context UMLs!ReadLinkObjectEndAction def: post_type_of_object(): Boolean = --ReadLinkObjectEndAction_type_of_object
	  UMLs!ReadLinkObjectEndAction.allInstances()->forAll(rloea |  
UMLs!Type.allInstances()->includes(rloea.object.type) implies (
UMLs!Association.allInstances()->includes(rloea.end.association) implies (
UMLs!InputPin.allInstances()->includes(rloea.object) implies (
UMLs!Property.allInstances()->includes(rloea.end) implies (
	    rloea.object.type = rloea.end.association
	    ))))
	); 
	
	--@post
	helper context UMLs!ReadLinkObjectEndAction def: post_type_of_result(): Boolean = --ReadLinkObjectEndAction_type_of_result
	  UMLs!ReadLinkObjectEndAction.allInstances()->forAll(rloea |  
UMLs!Type.allInstances()->includes(rloea.end.type) implies (
UMLs!OutputPin.allInstances()->includes(rloea.result) implies (
UMLs!Type.allInstances()->includes(rloea.result.type) implies (
UMLs!Property.allInstances()->includes(rloea.end) implies (
	    rloea.result.type = rloea.end.type
	    ))))
	); 
	
	--@post
	helper context UMLs!ReadExtentAction def: post_type_is_classifier(): Boolean = --ReadExtentAction_type_is_classifier
	  UMLs!ReadExtentAction.allInstances()->forAll(rea |  
UMLs!Classifier.allInstances()->includes(rea.classifier) implies (
UMLs!Type.allInstances()->includes(rea.result.type) implies (
UMLs!OutputPin.allInstances()->includes(rea.result) implies (
	    rea.result.type = rea.classifier
	    )))
	); 
	
	
	--@post
	helper context UMLs!CreateObjectAction def: post_same_type(): Boolean = --CreateObjectAction_same_type
	  UMLs!CreateObjectAction.allInstances()->forAll(coa |  
UMLs!Classifier.allInstances()->includes(coa.classifier) implies (
UMLs!OutputPin.allInstances()->includes(coa.result) implies (
UMLs!Type.allInstances()->includes(coa.result.type) implies (
	    coa.result.type = coa.classifier
	    )))
	); 
	
	
	--@post
	helper context UMLs!ActivityParameterNode def: post_same_type(): Boolean = --ActivityParameterNode_same_type
	  UMLs!ActivityParameterNode.allInstances()->forAll(apn |  
UMLs!Type.allInstances()->includes(apn.type) implies (
UMLs!Type.allInstances()->includes(apn.parameter.type) implies (
UMLs!Parameter.allInstances()->includes(apn.parameter) implies (
	    apn.type = apn.parameter.type
	    )))
	); 
	

	--@post
	helper context UMLs!ExceptionHandler def: post_handler_body_edges(): Boolean = --ExceptionHandler_handler_body_edges
	  UMLs!ExceptionHandler.allInstances()->forAll(eh |  
eh.handlerBody.outgoing->size()>0 implies (
eh.exceptionInput.incoming->size()>0 implies (
UMLs!ExecutableNode.allInstances()->includes(eh.handlerBody) implies (
UMLs!ObjectNode.allInstances()->includes(eh.exceptionInput) implies (
eh.handlerBody.incoming->size()>0 implies (
	    eh.handlerBody.incoming->isEmpty() and eh.handlerBody.outgoing->isEmpty() and eh.exceptionInput.incoming->isEmpty()
	    )))))
	); 
	
	--@post
	helper context UMLs!ObjectFlow def: post_no_executable_nodes(): Boolean = --ObjectFlow_no_executable_nodes
	  UMLs!ObjectFlow.allInstances()->forAll(of |  
UMLs!ActivityNode.allInstances()->includes(of.source) implies (
UMLs!ActivityNode.allInstances()->includes(of.target) implies (
	    not(of.source.oclIsKindOf(UMLs!ExecutableNode) or of.target.oclIsKindOf(UMLs!ExecutableNode))
	    ))
	); 

	--@post
	helper context UMLs!ConsiderIgnoreFragment def: post_type(): Boolean = --ConsiderIgnoreFragment_type
	  UMLs!ConsiderIgnoreFragment.allInstances()->forAll(cif |  
cif.message->size()>0 implies (
	    cif.message->forAll(nem|
	      nem.oclIsKindOf(UMLs!Operation) or nem.oclIsKindOf(UMLs!Signal))
	    )
	); 
	
	--@post
	helper context UMLs!DurationConstraint def: post_has_one_or_two_constrainedElements(): Boolean = --DurationConstraint_has_one_or_two_constrainedElements
	  UMLs!DurationConstraint.allInstances()->forAll(dc |  
dc.constrainedElement->size()>0 implies (
	    dc.constrainedElement->size() = 1 or dc.constrainedElement->size() = 2
	    )
	); 
	
	
	--@post
	helper context UMLs!TimeConstraint def: post_has_one_constrainedElement(): Boolean = --TimeConstraint_has_one_constrainedElement
	  UMLs!TimeConstraint.allInstances()->forAll(tc |  
tc.constrainedElement->size()>0 implies (
	    tc.constrainedElement->size() = 1
	    )
	); 
	
	--@post
	helper context UMLs!Constraint def: post_not_apply_to_self(): Boolean = --Constraint_not_apply_to_self
	  UMLs!Constraint.allInstances()->forAll(c |  
c.constrainedElement->size()>0 implies (
	    not(c.constrainedElement->includes(c))
	    )
	); 
	
-- # Bug in decomposition, need to add forall elimination rule
--@post
	helper context UMLs!AcceptEventAction def: post_no_output_pins(): Boolean = --AcceptEventAction_no_output_pins
	  UMLs!AcceptEventAction.allInstances()->forAll(aea |  
aea.output->size()>0 implies (
aea.trigger->size()>0 implies (
	    aea.oclIsTypeOf(UMLs!AcceptEventAction) and aea.trigger->forAll(t1_|
	    UMLs!Event.allInstances()->includes(t1_.event) implies (
	      t1_.event.oclIsKindOf(UMLs!ChangeEvent) or t1_.event.oclIsKindOf(UMLs!CallEvent))) implies aea.output->size() = 0
	    ))
	);
	
 
--@post
helper context UMLs!Port def: post_encapsulated_owner(): Boolean = --Port_encapsulated_owner
  UMLs!Port.allInstances()->forAll(p |  
UMLs!Element.allInstances()->includes(p.owner) implies 
    p.owner = p.ownedPort
); 

--@post
helper context UMLs!OpaqueExpression def: post_language_body_size(): Boolean = --OpaqueExpression_language_body_size
  UMLs!OpaqueExpression.allInstances()->forAll(oe |  
oe.language->size()>0 implies 
oe.body->size()>0 implies 
    oe.language->notEmpty() implies oe.body->size() = oe.language->size()
); 

--@post
helper context UMLs!ReadIsClassifiedObjectAction def: post_boolean_result(): Boolean = --ReadIsClassifiedObjectAction_boolean_result
  UMLs!ReadIsClassifiedObjectAction.allInstances()->forAll(ricoa |  
UMLs!Type.allInstances()->includes(ricoa.result.type) implies 
UMLs!OutputPin.allInstances()->includes(ricoa.result) implies 
    ricoa.result.type = Boolean
); 

--@post
helper context UMLs!TestIdentityAction def: post_result_is_boolean(): Boolean = --TestIdentityAction_result_is_boolean
  UMLs!TestIdentityAction.allInstances()->forAll(tia |  
UMLs!Type.allInstances()->includes(tia.result.type) implies 
UMLs!OutputPin.allInstances()->includes(tia.result) implies 
    tia.result.type = Boolean
); 

--@post
helper context UMLs!DecisionNode def: post_incoming_outgoing_edges(): Boolean = --DecisionNode_incoming_outgoing_edges
  UMLs!DecisionNode.allInstances()->forAll(dn |  
dn.outgoing->size()>0 implies 
dn.incoming->size()>0 implies 
    dn.incoming->size() = 1 or dn.incoming->size() = 2 and dn.outgoing->size() > 0
); 

--@post
helper context UMLs!TemplateBinding def: post_one_parameter_substitution(): Boolean = --TemplateBinding_one_parameter_substitution
  UMLs!TemplateBinding.allInstances()->forAll(tb |  
tb.signature.parameter->size()>0 implies 
UMLs!TemplateSignature.allInstances()->includes(tb.signature) implies 
tb.parameterSubstitution->size()>0 implies 
    tb.signature.parameter->forAll(tpp|
      tb.parameterSubstitution->select(tpsb|
      UMLs!TemplateParameter.allInstances()->includes(tpsb.formal) implies 
        tpsb.formal = tpp)->size() <= 1)
); 

--@post
helper context UMLs!ParameterSet def: post_same_parameterized_entity(): Boolean = --ParameterSet_same_parameterized_entity
  UMLs!ParameterSet.allInstances()->forAll(ps |  
UMLs!Element.allInstances()->includes(ps.owner) implies 
ps.parameter->size()>0 implies 
    ps.parameter->forAll(pp1,pp2|
    UMLs!Element.allInstances()->includes(pp1.owner) implies 
    UMLs!Element.allInstances()->includes(pp2.owner) implies 
      ps.owner = pp1.owner and ps.owner = pp2.owner and pp1.direction = pp2.direction)
); 

--@post
helper context UMLs!QualifierValue def: post_qualifier_attribute(): Boolean = --QualifierValue_qualifier_attribute
  UMLs!QualifierValue.allInstances()->forAll(qv |  
UMLs!Property.allInstances()->includes(qv.qualifier) implies 
    qv.qualifier.end.qualifier->includes(qv.qualifier)
); 

--@post
helper context UMLs!ReadLinkObjectEndAction def: post_association_of_association(): Boolean = --ReadLinkObjectEndAction_association_of_association
  UMLs!ReadLinkObjectEndAction.allInstances()->forAll(rloea |  
UMLs!Association.allInstances()->includes(rloea.end.association) implies 
UMLs!Property.allInstances()->includes(rloea.end) implies 
    rloea.end.association.oclIsKindOf(UMLs!AssociationClass)
); 


--@post
helper context UMLs!ReadLinkObjectEndQualifierAction def: post_type_of_object(): Boolean = --ReadLinkObjectEndQualifierAction_type_of_object
  UMLs!ReadLinkObjectEndQualifierAction.allInstances()->forAll(rloeqa |  
UMLs!Type.allInstances()->includes(rloeqa.object.type) implies 
UMLs!InputPin.allInstances()->includes(rloeqa.object) implies 
UMLs!Property.allInstances()->includes(rloeqa.qualifier) implies 
UMLs!Association.allInstances()->includes(rloeqa.qualifier.associationEnd.association) implies 
UMLs!Property.allInstances()->includes(rloeqa.qualifier.associationEnd) implies 
    rloeqa.object.type = rloeqa.qualifier.associationEnd.association
); 

--@post
helper context UMLs!ReadLinkObjectEndQualifierAction def: post_ends_of_association(): Boolean = --ReadLinkObjectEndQualifierAction_ends_of_association
  UMLs!ReadLinkObjectEndQualifierAction.allInstances()->forAll(rloeqa |  
UMLs!Association.allInstances()->includes(rloeqa.qualifier.associationEnd.association) implies 
UMLs!Property.allInstances()->includes(rloeqa.qualifier) implies 
rloeqa.qualifier.associationEnd.association.memberEnd->size()>0 implies 
UMLs!Property.allInstances()->includes(rloeqa.qualifier.associationEnd) implies 
    rloeqa.qualifier.associationEnd.association.memberEnd->forAll(pe|
      not(pe.isStatic))
); 

--@post
helper context UMLs!RedefinableElement def: post_non_leaf_redefinition(): Boolean = --RedefinableElement_non_leaf_redefinition
  UMLs!RedefinableElement.allInstances()->forAll(re |  
re.redefinedElement->size()>0 implies 
    re.redefinedElement->forAll(rere|
      not(rere.isLeaf))
); 


-- # Hang
	--@post
	helper context UMLs!ExceptionHandler def: post_handler_body_owner(): Boolean = --ExceptionHandler_handler_body_owner
	  UMLs!ExceptionHandler.allInstances()->forAll(eh |  
UMLs!ExecutableNode.allInstances()->includes(eh.handlerBody) implies (
UMLs!Element.allInstances()->includes(eh.protectedNode.owner) implies (
UMLs!ExecutableNode.allInstances()->includes(eh.protectedNode) implies (
UMLs!Element.allInstances()->includes(eh.handlerBody.owner) implies (
	    eh.handlerBody.owner = eh.protectedNode.owner
	    ))))
	); 
	
--@post
helper context UMLs!Trigger def: post_trigger_with_ports(): Boolean = --Trigger_trigger_with_ports
  UMLs!Trigger.allInstances()->forAll(t |  
UMLs!Event.allInstances()->includes(t.event) implies 
t.port->size()>0 implies 
    t.port->notEmpty() implies t.event.oclIsKindOf(UMLs!MessageEvent)
); 

--@post
helper context UMLs!ReplyAction def: post_event_on_reply_to_call_trigger(): Boolean = --ReplyAction_event_on_reply_to_call_trigger
  UMLs!ReplyAction.allInstances()->forAll(ra |  
UMLs!Trigger.allInstances()->includes(ra.replyToCall) implies 
UMLs!Event.allInstances()->includes(ra.replyToCall.event) implies 
    ra.replyToCall.event.oclIsKindOf(UMLs!CallEvent)
); 

--@post
helper context UMLs!ReadLinkObjectEndQualifierAction def: post_association_of_association(): Boolean = --ReadLinkObjectEndQualifierAction_association_of_association
  UMLs!ReadLinkObjectEndQualifierAction.allInstances()->forAll(rloeqa |  
UMLs!Property.allInstances()->includes(rloeqa.qualifier.associationEnd) implies 
UMLs!Association.allInstances()->includes(rloeqa.qualifier.associationEnd.association) implies 
UMLs!Property.allInstances()->includes(rloeqa.qualifier) implies 
    rloeqa.qualifier.associationEnd.association.oclIsKindOf(UMLs!AssociationClass)
); 

--@post
helper context UMLs!ReadSelfAction def: post_type(): Boolean = --ReadSelfAction_type
  UMLs!ReadSelfAction.allInstances()->forAll(rsa |  
UMLs!OutputPin.allInstances()->includes(rsa.result) implies 
UMLs!Type.allInstances()->includes(rsa.result.type) implies 
UMLs!Classifier.allInstances()->includes(rsa.context) implies 
    rsa.result.type = rsa.context
); 

--@post
helper context UMLs!ReadStructuralFeatureAction def: post_type_and_ordering(): Boolean = --ReadStructuralFeatureAction_type_and_ordering
  UMLs!ReadStructuralFeatureAction.allInstances()->forAll(rsfa |  
UMLs!StructuralFeature.allInstances()->includes(rsfa.structuralFeature) implies 
UMLs!Type.allInstances()->includes(rsfa.result.type) implies 
UMLs!OutputPin.allInstances()->includes(rsfa.result) implies 
UMLs!Type.allInstances()->includes(rsfa.structuralFeature.type) implies 
    rsfa.result.type = rsfa.structuralFeature.type and rsfa.result.isOrdered = rsfa.structuralFeature.isOrdered
); 

--@post
helper context UMLs!ReadVariableAction def: post_type_and_ordering(): Boolean = --ReadVariableAction_type_and_ordering
  UMLs!ReadVariableAction.allInstances()->forAll(rva |  
UMLs!OutputPin.allInstances()->includes(rva.result) implies 
UMLs!Variable.allInstances()->includes(rva.variable) implies 
UMLs!Type.allInstances()->includes(rva.result.type) implies 
UMLs!Type.allInstances()->includes(rva.variable.type) implies 
    rva.result.type = rva.variable.type and rva.result.isOrdered = rva.variable.isOrdered
); 


-- # Exectrace: Introduction -> TypeInference -> Null Pointer


--@post
helper context UMLs!Parameter def: post_connector_end(): Boolean = --Parameter_connector_end
  UMLs!Parameter.allInstances()->forAll(p |  
p.end->size()>0 implies 
    p.end->notEmpty() implies p.collaborationRole->notEmpty()
); 